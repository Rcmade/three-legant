import Stripe from "stripe";
import { db } from "@/db/db";
import { eq, and, sql, or } from "drizzle-orm";
import {
  orders,
  tempOrders,
  orderItems,
  tempOrderItems,
} from "@/db/schema/orderSchema";
import { UserCart } from "@/db/schema/cartSchema";
import { products, inventoryLogs } from "@/db/schema/productSchema";

const stripeCon = new Stripe(process.env.STRIPE_SECRET_KEY!);

export const productPaymentSucceeded = async (text: string, sig: string) => {
  try {
    // Verify and construct the Stripe event
    const event = stripeCon.webhooks.constructEvent(
      text,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET!
    );

    if (event.type === "payment_intent.succeeded") {
      const paymentIntent = event.data.object;
      // const orderId = paymentIntent.metadata.orderId;
      const clientSecretStr = String(event.data.object.client_secret);


      // if (!orderId) {
      //   console.error("Order ID missing in payment metadata.");
      //   return { error: "Order ID missing" };
      // }


      await db.transaction(async (trx) => {
        const tempOrder = await trx
          .select()
          .from(tempOrders)
          .where(eq(tempOrders.clientSecret, clientSecretStr))
          .limit(1);

        if (!tempOrder.length) {
          console.error(`No temporary order found for ID: ${orderId}`);
          throw new Error("Temp order not found");
        }

        const {
          userId,
          totalAmount,
          shippingMethod,
          clientSecret,
          userShippingAddress,
        } = tempOrder[0];

        const [newOrder] = await trx
          .insert(orders)
          .values({
            userId,
            totalAmount,
            shippingMethod,
            clientSecret,
            userShippingAddress,
            status: "paid",
          })
          .returning({ id: orders.id });

        const newOrderId = newOrder.id;

        const tempOrderItemsData = await trx
          .select()
          .from(tempOrderItems)
          .where(eq(tempOrderItems.orderId, orderId));

        if (!tempOrderItemsData.length) {
          console.warn(`No items found for temporary order ${orderId}`);
        }

        const finalOrderItems = tempOrderItemsData.map((item) => ({
          orderId: newOrderId,
          productId: item.productId,
          name: item.name,
          qty: item.qty,
          price: item.price,
          primaryImage: item.primaryImage,
        }));

        // Insert all order items in a single query
        await trx.insert(orderItems).values(finalOrderItems);

        // Prepare bulk updates for stock and inventory logs
        const stockUpdates = [];
        const inventoryLogsData = [];
        const userCartDeletions = [];

        for (const item of tempOrderItemsData) {
          const { productId, qty } = item;

          // Collect stock updates and inventory logs
          stockUpdates.push({ productId, qty });
          inventoryLogsData.push({
            productId,
            userId,
            changeType: "SALE",
            quantity: -qty,
          });
          userCartDeletions.push({ productId, userId });
        }

        // Bulk update product stock
        // await trx
        //   .update(products)
        //   .set({
        //     stock: sql`${products.stock} - ${sql.join(
        //       stockUpdates.map((item) => sql`${item.qty}`),
        //       " + "
        //     )}`,
        //   })
        //   .where(
        //     or(
        //       ...stockUpdates.map(({ productId }) => eq(products.id, productId))
        //     )
        //   );

        for (const { productId, qty } of stockUpdates) {
          await trx
            .update(products)
            .set({
              stock: sql`${products.stock} - ${qty}`,
            })
            .where(eq(products.id, productId));
        }

        // Bulk insert inventory logs
        await trx.insert(inventoryLogs).values(inventoryLogsData);

        // Bulk delete from UserCart
        await trx
          .delete(UserCart)
          .where(
            or(
              ...userCartDeletions.map(({ productId, userId }) =>
                and(
                  eq(UserCart.productId, productId),
                  eq(UserCart.userId, userId)
                )
              )
            )
          );

        // Delete temp order and items in a single operation
        await trx
          .delete(tempOrderItems)
          .where(eq(tempOrderItems.orderId, orderId));
        await trx.delete(tempOrders).where(eq(tempOrders.id, orderId));

      });
    } else {
      console.warn(`Unhandled event type: ${event.type}`);
    }

    return { received: true };
  } catch (error) {
    console.error("Error handling Stripe webhook:", error);
    return { error: "Webhook handling failed" };
  }
};













































// import stripe from "stripe";
// import { db } from "@/db/db";
// import { shippingAddress } from "@/db/schema";
// import { eq } from "drizzle-orm";
// import { getAllCartProducts } from "../user/cart";
// import { getAddresses } from "../address";
// import { PaymentIntentRequestT } from "@/types";

// export const createPaymentIntent = async (
//   userId: string,
//   data: PaymentIntentRequestT,
//   verifyOnly = false
// ) => {
//   const [shippingMethod] = await db
//     .select()
//     .from(shippingAddress)
//     .where(eq(shippingAddress.id, data.shippingMethodId))
//     .limit(1)
//     .execute();

//   if (!shippingMethod) {
//     throw new Error("Invalid shipping method.");
//   }

//   const userCart = await getAllCartProducts(userId, { noLimit: true });

//   if (userCart.products.length === 0) {
//     throw new Error("Cart is empty.");
//   }

//   const totalAmount = userCart.total + +(shippingMethod.shippingCost || 0);
//   const [userShippingAddress] = await getAddresses(userId, true);

//   if (!userShippingAddress) {
//     throw new Error("User shipping address not found.");
//   }

//   const totalAmountInCents = Math.round(totalAmount * 100);

//   if (verifyOnly) {
//     return {
//       cart: userCart,
//       totalAmount: totalAmountInCents,
//       clientSecret: null,
//     };
//   }

//   const stripeSecretKey = process.env.STRIPE_SECRET_KEY;
//   if (!stripeSecretKey) {
//     throw new Error("Stripe secret key is not configured.");
//   }

//   const stripeCon = new stripe(stripeSecretKey);

//   const productDescription = userCart.products
//     .map((item) => `${item.qty}x ${item.name}`)
//     .join(", ");

//   let paymentIntent: stripe.PaymentIntent;

//   const shipping: stripe.PaymentIntentCreateParams.Shipping = {
//     name: `${userShippingAddress.firstName} ${userShippingAddress.lastName}`,
//     phone: userShippingAddress.phone || "N/A",
//     carrier: shippingMethod.title || "Standard Shipping",
//     address: {
//       line1: userShippingAddress.street,
//       postal_code: userShippingAddress.zipCode,
//       city: userShippingAddress.city,
//       state: userShippingAddress.state,
//       country: userShippingAddress.country,
//     },
//   };
//   const metadata: stripe.MetadataParam = {
//     userId,
//     shippingMethod: shippingMethod.title,
//     productCount: userCart.products.length,
//   };

//   if (data.clientSecret) {
//     // Retrieve and update the existing payment intent
//     try {
//       const intentId = data.clientSecret.split("_secret_")[0]; // Extract intent ID from the client secret
//       paymentIntent = await stripeCon.paymentIntents.update(intentId, {
//         amount: totalAmountInCents,
//         description: productDescription,
//         shipping,
//         metadata,
//       });
//     } catch (error: any) {
//       throw new Error(`Failed to update payment intent: ${error.message}`);
//     }
//   } else {
//     // Create a new payment intent if no client secret is provided
//     paymentIntent = await stripeCon.paymentIntents.create({
//       amount: totalAmountInCents,
//       currency: "usd",
//       description: productDescription,
//       automatic_payment_methods: { enabled: true },
//       shipping,
//       metadata,
//     });

//   }

//   return {
//     clientSecret: paymentIntent.client_secret,
//   };
// };



























































"use client";
import { useCallback, useEffect, useState } from "react";
import {
  Elements,
  useStripe,
  useElements,
  PaymentElement,
} from "@stripe/react-stripe-js";
import { loadStripe, StripeElementsOptions } from "@stripe/stripe-js";
import type {
  CartsResponseT,
  CreatePaymentIntentRequestT,
  CreatePaymentIntentResponseT,
  CreateTempOrderResponseT,
  GetAddressResponseT,
  GetShippingMethodsResponseT,
} from "@/types/apiResponse";
import { Button } from "@/components/ui/button";
import axios from "axios";
import { getAxiosErrorMessage, getBackendUrl } from "@/lib/utils/stringUtils";
import {
  createPaymentIntentApi,
  createTempOrderApi,
} from "@/constant/apiRoute";
import { useAuthorization } from "@/hooks/useAuthorization";
import FormResultMessage from "../alerts/FormResultMessage";
import { wait } from "@/lib/utils/testUtils";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import { intentSecretParams, shippingSearchParams } from "@/constant";

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

interface PaymentFormProps {
  contactInfo: GetAddressResponseT[0];
  currentShippingType?: GetShippingMethodsResponseT[0];
  cart: CartsResponseT | undefined;
}
const PaymentForm = ({
  contactInfo,
  currentShippingType,
  cart,
}: PaymentFormProps) => {
  const searchParams = useSearchParams();
  const [clientSecret, setClientSecret] = useState<string | null>(
    searchParams.get(intentSecretParams),
  );
  const [error, setError] = useState<string | null>(null);
  const { authorization } = useAuthorization();
  const pathname = usePathname();

  const createPaymentIntent = useCallback(async () => {
    try {
      const { data } = await axios.post<CreatePaymentIntentResponseT>(
        getBackendUrl(createPaymentIntentApi),
        {
          shippingMethodId: currentShippingType?.id,
          clientSecret: clientSecret || undefined,
        } as CreatePaymentIntentRequestT,
        {
          withCredentials: true,
          headers: { Authorization: authorization },
        },
      );
      const url = new URL(window.location.href);
      // Set or update the search param without rerendering to prevent secret changes
      url.searchParams.set(intentSecretParams, data.clientSecret!);
      window.history.replaceState(null, "", url);
      setClientSecret(data.clientSecret);
    } catch (err: any) {
      console.log({ err });
      setError(getAxiosErrorMessage(error).error || "Something went wrong.");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentShippingType?.id, authorization]);

  useEffect(() => {
    createPaymentIntent();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [cart]);

  const options: StripeElementsOptions = {
    clientSecret: clientSecret!,
    appearance: { theme: "stripe" },
  };

  return (
    <div>
      {error && <FormResultMessage message={error} variant="destructive" />}
      {clientSecret && !error ? (
        <Elements key={clientSecret} stripe={stripePromise} options={options}>
          <CheckoutForm
            currentShippingType={currentShippingType}
            clientSecret={clientSecret}
            contactInfo={contactInfo}
            cart={cart}
          />
        </Elements>
      ) : (
        <p>Loading payment form...</p>
      )}
    </div>
  );
};

const CheckoutForm = ({
  contactInfo,
  clientSecret,
  currentShippingType,
}: PaymentFormProps & { clientSecret: string }) => {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const { authorization } = useAuthorization();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    try {
      if (!stripe || !elements) return;
      setLoading(true);
      setPaymentError(null);

      if (!authorization) {
        setPaymentError("Please sign in to complete the payment");
        return;
      }

      const tempOrderData = {
        shippingId: contactInfo.id,
        clientSecret,
        shippingMethodId: currentShippingType?.id,
      };

      const validate = await elements.submit();
      if (validate.error) {
        return;
      }

      // 1. Create Temporary Order
      const { data: tempOrderResponse } =
        await axios.post<CreateTempOrderResponseT>(
          getBackendUrl(createTempOrderApi),
          tempOrderData,
          {
            headers: {
              Authorization: authorization,
            },
            withCredentials: true,
          },
        );

      await wait(60 * 1000);
      // 2. Confirm Payment with Stripe
      const { error, ...rest } = await stripe.confirmPayment({
        elements,
        // confirmParams: {
        //   return_url: `${process.env.NEXT_PUBLIC_URL}/user/order-complete`,
        // },
        redirect: "if_required",
      });


      if (error) {
        console.error("Payment Error:", error.message);
        setPaymentError(error?.message || "");
        return;
      }


      // Redirect user after successful payment (handled via return_url)
    } catch (error) {
      console.error("Error processing payment:", error);
      setPaymentError(
        getAxiosErrorMessage(error)?.error ||
          "An unexpected error occurred. Please try again.",
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <PaymentElement options={{}} />
      {paymentError && (
        <FormResultMessage message={paymentError} variant="destructive" />
      )}
      <Button disabled={!stripe || loading} className="w-full">
        {loading ? "Processing..." : "Place Order"}
      </Button>
    </form>
  );
};

export default PaymentForm;



































































export const getProducts = async (
  paginationParams: PaginationParams & {
    sortBy?: keyof typeof products;
    category?: string;
    priceFilter?: number;
  }
) => {
  const {
    limit = 10,
    offset = 0,
    search = "",
    priceFilter,
    sortBy = "createdAt",
    category,
  } = paginationParams;

  console.log({offset, limit, search, priceFilter});

  // Full-text search across multiple fields
  const searchQuery = search
    ? sql`
      (
        to_tsvector('english', 
          coalesce(${products.name}, '') || ' ' || 
          coalesce(${products.categoryName}, '') || ' ' || 
          coalesce(${products.description}, '')
        ) @@ websearch_to_tsquery('english', ${search})
        OR ${products.name} % ${search}  -- Fuzzy matching with pg_trgm
      )
    `
    : undefined;

  // Handle category filter (partial match)
  const categoryFilter = category
    ? like(products.categoryName, `%${category}%`)
    : undefined;

  // Handle price filter (<= specified price)
  const priceFilterQuery =
    priceFilter !== undefined && !isNaN(priceFilter)
      ? lte(products.price, priceFilter.toString())
      : undefined;

  // Combine all filters into a single where clause
  const filters = [searchQuery, categoryFilter, priceFilterQuery].filter(
    Boolean
  );
  const whereClause = filters.length > 0 ? and(...filters) : undefined;

  // Fetch products with pagination and sorting
  const productList = await db
    .select({
      id: products.id,
      name: products.name,
      description: products.description,
      price: products.price,
      discountedPrice: products.discountedPrice,
      primaryImage: products.primaryImage,
      stock: products.stock,
      brand: products.brand,
      categoryName: products.categoryName,
    })
    .from(products)
    .where(whereClause)
    .limit(limit)
    .offset(offset)
    .orderBy((products[sortBy] || products.createdAt) as any);

  // Get the total count for pagination
  const totalProducts = await db
    .select({ count: count() })
    .from(products)
    .where(whereClause);

  return {
    products: productList,
    pagination: {
      total: totalProducts[0]?.count || 0, // Handle case with no results
      limit,
      offset,
    },
  };
};